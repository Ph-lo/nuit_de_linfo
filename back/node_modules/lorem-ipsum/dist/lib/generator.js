"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _words = require("../constants/words");

var _util = require("../util");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Generator = /*#__PURE__*/function () {
  function Generator() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$sentencesPerPara = _ref.sentencesPerParagraph,
        sentencesPerParagraph = _ref$sentencesPerPara === void 0 ? {
      max: 7,
      min: 3
    } : _ref$sentencesPerPara,
        _ref$wordsPerSentence = _ref.wordsPerSentence,
        wordsPerSentence = _ref$wordsPerSentence === void 0 ? {
      max: 15,
      min: 5
    } : _ref$wordsPerSentence,
        random = _ref.random,
        seed = _ref.seed,
        _ref$words = _ref.words,
        words = _ref$words === void 0 ? _words.WORDS : _ref$words;

    _classCallCheck(this, Generator);

    _defineProperty(this, "sentencesPerParagraph", void 0);

    _defineProperty(this, "wordsPerSentence", void 0);

    _defineProperty(this, "random", void 0);

    _defineProperty(this, "words", void 0);

    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {
      throw new Error("Minimum number of sentences per paragraph (".concat(sentencesPerParagraph.min, ") cannot exceed maximum (").concat(sentencesPerParagraph.max, ")."));
    }

    if (wordsPerSentence.min > wordsPerSentence.max) {
      throw new Error("Minimum number of words per sentence (".concat(wordsPerSentence.min, ") cannot exceed maximum (").concat(wordsPerSentence.max, ")."));
    }

    this.sentencesPerParagraph = sentencesPerParagraph;
    this.words = words;
    this.wordsPerSentence = wordsPerSentence;
    this.random = random || Math.random;
  }

  _createClass(Generator, [{
    key: "generateRandomInteger",
    value: function generateRandomInteger(min, max) {
      return Math.floor(this.random() * (max - min + 1) + min);
    }
  }, {
    key: "generateRandomWords",
    value: function generateRandomWords(num) {
      var _this = this;

      var _this$wordsPerSentenc = this.wordsPerSentence,
          min = _this$wordsPerSentenc.min,
          max = _this$wordsPerSentenc.max;
      var length = num || this.generateRandomInteger(min, max);
      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {
        return "".concat(_this.pluckRandomWord(), " ").concat(accumulator);
      }, "").trim();
    }
  }, {
    key: "generateRandomSentence",
    value: function generateRandomSentence(num) {
      return "".concat((0, _util.capitalize)(this.generateRandomWords(num)), ".");
    }
  }, {
    key: "generateRandomParagraph",
    value: function generateRandomParagraph(num) {
      var _this2 = this;

      var _this$sentencesPerPar = this.sentencesPerParagraph,
          min = _this$sentencesPerPar.min,
          max = _this$sentencesPerPar.max;
      var length = num || this.generateRandomInteger(min, max);
      return (0, _util.makeArrayOfLength)(length).reduce(function (accumulator, index) {
        return "".concat(_this2.generateRandomSentence(), " ").concat(accumulator);
      }, "").trim();
    }
  }, {
    key: "pluckRandomWord",
    value: function pluckRandomWord() {
      var min = 0;
      var max = this.words.length - 1;
      var index = this.generateRandomInteger(min, max);
      return this.words[index];
    }
  }]);

  return Generator;
}();

var _default = Generator;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbIkdlbmVyYXRvciIsInNlbnRlbmNlc1BlclBhcmFncmFwaCIsIm1heCIsIm1pbiIsIndvcmRzUGVyU2VudGVuY2UiLCJyYW5kb20iLCJzZWVkIiwid29yZHMiLCJXT1JEUyIsIkVycm9yIiwiTWF0aCIsImZsb29yIiwibnVtIiwibGVuZ3RoIiwiZ2VuZXJhdGVSYW5kb21JbnRlZ2VyIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpbmRleCIsInBsdWNrUmFuZG9tV29yZCIsInRyaW0iLCJnZW5lcmF0ZVJhbmRvbVdvcmRzIiwiZ2VuZXJhdGVSYW5kb21TZW50ZW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7O0lBdUJNQSxTO0FBTUosdUJBTTJCO0FBQUEsbUZBQUosRUFBSTtBQUFBLHFDQUx6QkMscUJBS3lCO0FBQUEsUUFMekJBLHFCQUt5QixzQ0FMRDtBQUFFQyxNQUFBQSxHQUFHLEVBQUUsQ0FBUDtBQUFVQyxNQUFBQSxHQUFHLEVBQUU7QUFBZixLQUtDO0FBQUEscUNBSnpCQyxnQkFJeUI7QUFBQSxRQUp6QkEsZ0JBSXlCLHNDQUpOO0FBQUVGLE1BQUFBLEdBQUcsRUFBRSxFQUFQO0FBQVdDLE1BQUFBLEdBQUcsRUFBRTtBQUFoQixLQUlNO0FBQUEsUUFIekJFLE1BR3lCLFFBSHpCQSxNQUd5QjtBQUFBLFFBRnpCQyxJQUV5QixRQUZ6QkEsSUFFeUI7QUFBQSwwQkFEekJDLEtBQ3lCO0FBQUEsUUFEekJBLEtBQ3lCLDJCQURqQkMsWUFDaUI7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQ3pCLFFBQUlQLHFCQUFxQixDQUFDRSxHQUF0QixHQUE0QkYscUJBQXFCLENBQUNDLEdBQXRELEVBQTJEO0FBQ3pELFlBQU0sSUFBSU8sS0FBSixzREFFRlIscUJBQXFCLENBQUNFLEdBRnBCLHNDQUd3QkYscUJBQXFCLENBQUNDLEdBSDlDLFFBQU47QUFLRDs7QUFFRCxRQUFJRSxnQkFBZ0IsQ0FBQ0QsR0FBakIsR0FBdUJDLGdCQUFnQixDQUFDRixHQUE1QyxFQUFpRDtBQUMvQyxZQUFNLElBQUlPLEtBQUosaURBRUZMLGdCQUFnQixDQUFDRCxHQUZmLHNDQUd3QkMsZ0JBQWdCLENBQUNGLEdBSHpDLFFBQU47QUFLRDs7QUFFRCxTQUFLRCxxQkFBTCxHQUE2QkEscUJBQTdCO0FBQ0EsU0FBS00sS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0gsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBTSxJQUFJSyxJQUFJLENBQUNMLE1BQTdCO0FBQ0Q7Ozs7V0FFRCwrQkFBNkJGLEdBQTdCLEVBQTBDRCxHQUExQyxFQUErRDtBQUM3RCxhQUFPUSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxLQUFLTixNQUFMLE1BQWlCSCxHQUFHLEdBQUdDLEdBQU4sR0FBWSxDQUE3QixJQUFrQ0EsR0FBN0MsQ0FBUDtBQUNEOzs7V0FFRCw2QkFBMkJTLEdBQTNCLEVBQWlEO0FBQUE7O0FBQy9DLGtDQUFxQixLQUFLUixnQkFBMUI7QUFBQSxVQUFRRCxHQUFSLHlCQUFRQSxHQUFSO0FBQUEsVUFBYUQsR0FBYix5QkFBYUEsR0FBYjtBQUNBLFVBQU1XLE1BQU0sR0FBR0QsR0FBRyxJQUFJLEtBQUtFLHFCQUFMLENBQTJCWCxHQUEzQixFQUFnQ0QsR0FBaEMsQ0FBdEI7QUFDQSxhQUFPLDZCQUFrQlcsTUFBbEIsRUFDSkUsTUFESSxDQUNHLFVBQUNDLFdBQUQsRUFBc0JDLEtBQXRCLEVBQWdEO0FBQ3RELHlCQUFVLEtBQUksQ0FBQ0MsZUFBTCxFQUFWLGNBQW9DRixXQUFwQztBQUNELE9BSEksRUFHRixFQUhFLEVBSUpHLElBSkksRUFBUDtBQUtEOzs7V0FFRCxnQ0FBOEJQLEdBQTlCLEVBQW9EO0FBQ2xELHVCQUFVLHNCQUFXLEtBQUtRLG1CQUFMLENBQXlCUixHQUF6QixDQUFYLENBQVY7QUFDRDs7O1dBRUQsaUNBQStCQSxHQUEvQixFQUFxRDtBQUFBOztBQUNuRCxrQ0FBcUIsS0FBS1gscUJBQTFCO0FBQUEsVUFBUUUsR0FBUix5QkFBUUEsR0FBUjtBQUFBLFVBQWFELEdBQWIseUJBQWFBLEdBQWI7QUFDQSxVQUFNVyxNQUFNLEdBQUdELEdBQUcsSUFBSSxLQUFLRSxxQkFBTCxDQUEyQlgsR0FBM0IsRUFBZ0NELEdBQWhDLENBQXRCO0FBQ0EsYUFBTyw2QkFBa0JXLE1BQWxCLEVBQ0pFLE1BREksQ0FDRyxVQUFDQyxXQUFELEVBQXNCQyxLQUF0QixFQUFnRDtBQUN0RCx5QkFBVSxNQUFJLENBQUNJLHNCQUFMLEVBQVYsY0FBMkNMLFdBQTNDO0FBQ0QsT0FISSxFQUdGLEVBSEUsRUFJSkcsSUFKSSxFQUFQO0FBS0Q7OztXQUVELDJCQUFpQztBQUMvQixVQUFNaEIsR0FBRyxHQUFHLENBQVo7QUFDQSxVQUFNRCxHQUFHLEdBQUcsS0FBS0ssS0FBTCxDQUFXTSxNQUFYLEdBQW9CLENBQWhDO0FBQ0EsVUFBTUksS0FBSyxHQUFHLEtBQUtILHFCQUFMLENBQTJCWCxHQUEzQixFQUFnQ0QsR0FBaEMsQ0FBZDtBQUNBLGFBQU8sS0FBS0ssS0FBTCxDQUFXVSxLQUFYLENBQVA7QUFDRDs7Ozs7O2VBR1lqQixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV09SRFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3dvcmRzXCI7XHJcbmltcG9ydCB7IGNhcGl0YWxpemUsIG1ha2VBcnJheU9mTGVuZ3RoIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kcyB7XHJcbiAgbWluOiBudW1iZXI7XHJcbiAgbWF4OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIElQcm5nID0gKCkgPT4gbnVtYmVyO1xyXG5cclxuZXhwb3J0IHR5cGUgSVNlZWRSYW5kb20gPSBuZXcgKHNlZWQ/OiBzdHJpbmcpID0+IElQcm5nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTWF0aCB7XHJcbiAgc2VlZHJhbmRvbTogSVNlZWRSYW5kb207XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdlbmVyYXRvck9wdGlvbnMge1xyXG4gIHNlbnRlbmNlc1BlclBhcmFncmFwaD86IElCb3VuZHM7XHJcbiAgd29yZHNQZXJTZW50ZW5jZT86IElCb3VuZHM7XHJcbiAgcmFuZG9tPzogSVBybmc7XHJcbiAgc2VlZD86IHN0cmluZztcclxuICB3b3Jkcz86IHN0cmluZ1tdO1xyXG59XHJcblxyXG5jbGFzcyBHZW5lcmF0b3Ige1xyXG4gIHB1YmxpYyBzZW50ZW5jZXNQZXJQYXJhZ3JhcGg6IElCb3VuZHM7XHJcbiAgcHVibGljIHdvcmRzUGVyU2VudGVuY2U6IElCb3VuZHM7XHJcbiAgcHVibGljIHJhbmRvbTogSVBybmc7XHJcbiAgcHVibGljIHdvcmRzOiBzdHJpbmdbXTtcclxuXHJcbiAgY29uc3RydWN0b3Ioe1xyXG4gICAgc2VudGVuY2VzUGVyUGFyYWdyYXBoID0geyBtYXg6IDcsIG1pbjogMyB9LFxyXG4gICAgd29yZHNQZXJTZW50ZW5jZSA9IHsgbWF4OiAxNSwgbWluOiA1IH0sXHJcbiAgICByYW5kb20sXHJcbiAgICBzZWVkLFxyXG4gICAgd29yZHMgPSBXT1JEUyxcclxuICB9OiBJR2VuZXJhdG9yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBpZiAoc2VudGVuY2VzUGVyUGFyYWdyYXBoLm1pbiA+IHNlbnRlbmNlc1BlclBhcmFncmFwaC5tYXgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBNaW5pbXVtIG51bWJlciBvZiBzZW50ZW5jZXMgcGVyIHBhcmFncmFwaCAoJHtcclxuICAgICAgICAgIHNlbnRlbmNlc1BlclBhcmFncmFwaC5taW5cclxuICAgICAgICB9KSBjYW5ub3QgZXhjZWVkIG1heGltdW0gKCR7c2VudGVuY2VzUGVyUGFyYWdyYXBoLm1heH0pLmAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHdvcmRzUGVyU2VudGVuY2UubWluID4gd29yZHNQZXJTZW50ZW5jZS5tYXgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBNaW5pbXVtIG51bWJlciBvZiB3b3JkcyBwZXIgc2VudGVuY2UgKCR7XHJcbiAgICAgICAgICB3b3Jkc1BlclNlbnRlbmNlLm1pblxyXG4gICAgICAgIH0pIGNhbm5vdCBleGNlZWQgbWF4aW11bSAoJHt3b3Jkc1BlclNlbnRlbmNlLm1heH0pLmAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZW50ZW5jZXNQZXJQYXJhZ3JhcGggPSBzZW50ZW5jZXNQZXJQYXJhZ3JhcGg7XHJcbiAgICB0aGlzLndvcmRzID0gd29yZHM7XHJcbiAgICB0aGlzLndvcmRzUGVyU2VudGVuY2UgPSB3b3Jkc1BlclNlbnRlbmNlO1xyXG4gICAgdGhpcy5yYW5kb20gPSByYW5kb20gfHwgTWF0aC5yYW5kb207XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2VuZXJhdGVSYW5kb21JbnRlZ2VyKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZW5lcmF0ZVJhbmRvbVdvcmRzKG51bT86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLndvcmRzUGVyU2VudGVuY2U7XHJcbiAgICBjb25zdCBsZW5ndGggPSBudW0gfHwgdGhpcy5nZW5lcmF0ZVJhbmRvbUludGVnZXIobWluLCBtYXgpO1xyXG4gICAgcmV0dXJuIG1ha2VBcnJheU9mTGVuZ3RoKGxlbmd0aClcclxuICAgICAgLnJlZHVjZSgoYWNjdW11bGF0b3I6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMucGx1Y2tSYW5kb21Xb3JkKCl9ICR7YWNjdW11bGF0b3J9YDtcclxuICAgICAgfSwgXCJcIilcclxuICAgICAgLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZW5lcmF0ZVJhbmRvbVNlbnRlbmNlKG51bT86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7Y2FwaXRhbGl6ZSh0aGlzLmdlbmVyYXRlUmFuZG9tV29yZHMobnVtKSl9LmA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2VuZXJhdGVSYW5kb21QYXJhZ3JhcGgobnVtPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuc2VudGVuY2VzUGVyUGFyYWdyYXBoO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gbnVtIHx8IHRoaXMuZ2VuZXJhdGVSYW5kb21JbnRlZ2VyKG1pbiwgbWF4KTtcclxuICAgIHJldHVybiBtYWtlQXJyYXlPZkxlbmd0aChsZW5ndGgpXHJcbiAgICAgIC5yZWR1Y2UoKGFjY3VtdWxhdG9yOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdlbmVyYXRlUmFuZG9tU2VudGVuY2UoKX0gJHthY2N1bXVsYXRvcn1gO1xyXG4gICAgICB9LCBcIlwiKVxyXG4gICAgICAudHJpbSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsdWNrUmFuZG9tV29yZCgpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbWluID0gMDtcclxuICAgIGNvbnN0IG1heCA9IHRoaXMud29yZHMubGVuZ3RoIC0gMTtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZW5lcmF0ZVJhbmRvbUludGVnZXIobWluLCBtYXgpO1xyXG4gICAgcmV0dXJuIHRoaXMud29yZHNbaW5kZXhdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2VuZXJhdG9yO1xyXG4iXX0=