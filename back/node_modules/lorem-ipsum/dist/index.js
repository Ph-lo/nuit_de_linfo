"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LoremIpsum", {
  enumerable: true,
  get: function get() {
    return _LoremIpsum["default"];
  }
});
exports.loremIpsum = void 0;

var _formats = require("./constants/formats");

var _units = require("./constants/units");

var _words = require("./constants/words");

var _LoremIpsum = _interopRequireDefault(require("./lib/LoremIpsum"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var loremIpsum = function loremIpsum() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 1 : _ref$count,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? _formats.FORMAT_PLAIN : _ref$format,
      _ref$paragraphLowerBo = _ref.paragraphLowerBound,
      paragraphLowerBound = _ref$paragraphLowerBo === void 0 ? 3 : _ref$paragraphLowerBo,
      _ref$paragraphUpperBo = _ref.paragraphUpperBound,
      paragraphUpperBound = _ref$paragraphUpperBo === void 0 ? 7 : _ref$paragraphUpperBo,
      random = _ref.random,
      _ref$sentenceLowerBou = _ref.sentenceLowerBound,
      sentenceLowerBound = _ref$sentenceLowerBou === void 0 ? 5 : _ref$sentenceLowerBou,
      _ref$sentenceUpperBou = _ref.sentenceUpperBound,
      sentenceUpperBound = _ref$sentenceUpperBou === void 0 ? 15 : _ref$sentenceUpperBou,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? _units.UNIT_SENTENCES : _ref$units,
      _ref$words = _ref.words,
      words = _ref$words === void 0 ? _words.WORDS : _ref$words,
      _ref$suffix = _ref.suffix,
      suffix = _ref$suffix === void 0 ? "" : _ref$suffix;

  var options = {
    random: random,
    sentencesPerParagraph: {
      max: paragraphUpperBound,
      min: paragraphLowerBound
    },
    words: words,
    wordsPerSentence: {
      max: sentenceUpperBound,
      min: sentenceLowerBound
    }
  };
  var lorem = new _LoremIpsum["default"](options, format, suffix);

  switch (units) {
    case _units.UNIT_PARAGRAPHS:
    case _units.UNIT_PARAGRAPH:
      return lorem.generateParagraphs(count);

    case _units.UNIT_SENTENCES:
    case _units.UNIT_SENTENCE:
      return lorem.generateSentences(count);

    case _units.UNIT_WORDS:
    case _units.UNIT_WORD:
      return lorem.generateWords(count);

    default:
      return "";
  }
};

exports.loremIpsum = loremIpsum;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJsb3JlbUlwc3VtIiwiY291bnQiLCJmb3JtYXQiLCJGT1JNQVRfUExBSU4iLCJwYXJhZ3JhcGhMb3dlckJvdW5kIiwicGFyYWdyYXBoVXBwZXJCb3VuZCIsInJhbmRvbSIsInNlbnRlbmNlTG93ZXJCb3VuZCIsInNlbnRlbmNlVXBwZXJCb3VuZCIsInVuaXRzIiwiVU5JVF9TRU5URU5DRVMiLCJ3b3JkcyIsIldPUkRTIiwic3VmZml4Iiwib3B0aW9ucyIsInNlbnRlbmNlc1BlclBhcmFncmFwaCIsIm1heCIsIm1pbiIsIndvcmRzUGVyU2VudGVuY2UiLCJsb3JlbSIsIkxvcmVtSXBzdW0iLCJVTklUX1BBUkFHUkFQSFMiLCJVTklUX1BBUkFHUkFQSCIsImdlbmVyYXRlUGFyYWdyYXBocyIsIlVOSVRfU0VOVEVOQ0UiLCJnZW5lcmF0ZVNlbnRlbmNlcyIsIlVOSVRfV09SRFMiLCJVTklUX1dPUkQiLCJnZW5lcmF0ZVdvcmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBU0E7O0FBRUE7Ozs7QUFlQSxJQUFNQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQVdtQjtBQUFBLGlGQUFmLEVBQWU7QUFBQSx3QkFWcENDLEtBVW9DO0FBQUEsTUFWcENBLEtBVW9DLDJCQVY1QixDQVU0QjtBQUFBLHlCQVRwQ0MsTUFTb0M7QUFBQSxNQVRwQ0EsTUFTb0MsNEJBVDNCQyxxQkFTMkI7QUFBQSxtQ0FScENDLG1CQVFvQztBQUFBLE1BUnBDQSxtQkFRb0Msc0NBUmQsQ0FRYztBQUFBLG1DQVBwQ0MsbUJBT29DO0FBQUEsTUFQcENBLG1CQU9vQyxzQ0FQZCxDQU9jO0FBQUEsTUFOcENDLE1BTW9DLFFBTnBDQSxNQU1vQztBQUFBLG1DQUxwQ0Msa0JBS29DO0FBQUEsTUFMcENBLGtCQUtvQyxzQ0FMZixDQUtlO0FBQUEsbUNBSnBDQyxrQkFJb0M7QUFBQSxNQUpwQ0Esa0JBSW9DLHNDQUpmLEVBSWU7QUFBQSx3QkFIcENDLEtBR29DO0FBQUEsTUFIcENBLEtBR29DLDJCQUg1QkMscUJBRzRCO0FBQUEsd0JBRnBDQyxLQUVvQztBQUFBLE1BRnBDQSxLQUVvQywyQkFGNUJDLFlBRTRCO0FBQUEseUJBRHBDQyxNQUNvQztBQUFBLE1BRHBDQSxNQUNvQyw0QkFEM0IsRUFDMkI7O0FBQ3BDLE1BQU1DLE9BQU8sR0FBRztBQUNkUixJQUFBQSxNQUFNLEVBQU5BLE1BRGM7QUFFZFMsSUFBQUEscUJBQXFCLEVBQUU7QUFDckJDLE1BQUFBLEdBQUcsRUFBRVgsbUJBRGdCO0FBRXJCWSxNQUFBQSxHQUFHLEVBQUViO0FBRmdCLEtBRlQ7QUFNZE8sSUFBQUEsS0FBSyxFQUFMQSxLQU5jO0FBT2RPLElBQUFBLGdCQUFnQixFQUFFO0FBQ2hCRixNQUFBQSxHQUFHLEVBQUVSLGtCQURXO0FBRWhCUyxNQUFBQSxHQUFHLEVBQUVWO0FBRlc7QUFQSixHQUFoQjtBQWFBLE1BQU1ZLEtBQWlCLEdBQUcsSUFBSUMsc0JBQUosQ0FBZU4sT0FBZixFQUF3QlosTUFBeEIsRUFBZ0NXLE1BQWhDLENBQTFCOztBQUVBLFVBQVFKLEtBQVI7QUFDRSxTQUFLWSxzQkFBTDtBQUNBLFNBQUtDLHFCQUFMO0FBQ0UsYUFBT0gsS0FBSyxDQUFDSSxrQkFBTixDQUF5QnRCLEtBQXpCLENBQVA7O0FBQ0YsU0FBS1MscUJBQUw7QUFDQSxTQUFLYyxvQkFBTDtBQUNFLGFBQU9MLEtBQUssQ0FBQ00saUJBQU4sQ0FBd0J4QixLQUF4QixDQUFQOztBQUNGLFNBQUt5QixpQkFBTDtBQUNBLFNBQUtDLGdCQUFMO0FBQ0UsYUFBT1IsS0FBSyxDQUFDUyxhQUFOLENBQW9CM0IsS0FBcEIsQ0FBUDs7QUFDRjtBQUNFLGFBQU8sRUFBUDtBQVhKO0FBYUQsQ0F4Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb3JlbUZvcm1hdCwgRk9STUFUX1BMQUlOIH0gZnJvbSBcIi4vY29uc3RhbnRzL2Zvcm1hdHNcIjtcclxuaW1wb3J0IHtcclxuICBMb3JlbVVuaXQsXHJcbiAgVU5JVF9QQVJBR1JBUEgsXHJcbiAgVU5JVF9QQVJBR1JBUEhTLFxyXG4gIFVOSVRfU0VOVEVOQ0VTLFxyXG4gIFVOSVRfU0VOVEVOQ0UsXHJcbiAgVU5JVF9XT1JEUyxcclxuICBVTklUX1dPUkQsXHJcbn0gZnJvbSBcIi4vY29uc3RhbnRzL3VuaXRzXCI7XHJcbmltcG9ydCB7IFdPUkRTIH0gZnJvbSBcIi4vY29uc3RhbnRzL3dvcmRzXCI7XHJcbmltcG9ydCB7IElQcm5nIH0gZnJvbSBcIi4vbGliL2dlbmVyYXRvclwiO1xyXG5pbXBvcnQgTG9yZW1JcHN1bSBmcm9tIFwiLi9saWIvTG9yZW1JcHN1bVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTG9yZW1JcHN1bVBhcmFtcyB7XHJcbiAgY291bnQ/OiBudW1iZXI7XHJcbiAgZm9ybWF0PzogTG9yZW1Gb3JtYXQ7XHJcbiAgcGFyYWdyYXBoTG93ZXJCb3VuZD86IG51bWJlcjtcclxuICBwYXJhZ3JhcGhVcHBlckJvdW5kPzogbnVtYmVyO1xyXG4gIHJhbmRvbT86IElQcm5nO1xyXG4gIHNlbnRlbmNlTG93ZXJCb3VuZD86IG51bWJlcjtcclxuICBzZW50ZW5jZVVwcGVyQm91bmQ/OiBudW1iZXI7XHJcbiAgdW5pdHM/OiBMb3JlbVVuaXQ7XHJcbiAgd29yZHM/OiBzdHJpbmdbXTtcclxuICBzdWZmaXg/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGxvcmVtSXBzdW0gPSAoe1xyXG4gIGNvdW50ID0gMSxcclxuICBmb3JtYXQgPSBGT1JNQVRfUExBSU4sXHJcbiAgcGFyYWdyYXBoTG93ZXJCb3VuZCA9IDMsXHJcbiAgcGFyYWdyYXBoVXBwZXJCb3VuZCA9IDcsXHJcbiAgcmFuZG9tLFxyXG4gIHNlbnRlbmNlTG93ZXJCb3VuZCA9IDUsXHJcbiAgc2VudGVuY2VVcHBlckJvdW5kID0gMTUsXHJcbiAgdW5pdHMgPSBVTklUX1NFTlRFTkNFUyxcclxuICB3b3JkcyA9IFdPUkRTLFxyXG4gIHN1ZmZpeCA9IFwiXCIsXHJcbn06IElMb3JlbUlwc3VtUGFyYW1zID0ge30pOiBzdHJpbmcgPT4ge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICByYW5kb20sXHJcbiAgICBzZW50ZW5jZXNQZXJQYXJhZ3JhcGg6IHtcclxuICAgICAgbWF4OiBwYXJhZ3JhcGhVcHBlckJvdW5kLFxyXG4gICAgICBtaW46IHBhcmFncmFwaExvd2VyQm91bmQsXHJcbiAgICB9LFxyXG4gICAgd29yZHMsXHJcbiAgICB3b3Jkc1BlclNlbnRlbmNlOiB7XHJcbiAgICAgIG1heDogc2VudGVuY2VVcHBlckJvdW5kLFxyXG4gICAgICBtaW46IHNlbnRlbmNlTG93ZXJCb3VuZCxcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbG9yZW06IExvcmVtSXBzdW0gPSBuZXcgTG9yZW1JcHN1bShvcHRpb25zLCBmb3JtYXQsIHN1ZmZpeCk7XHJcblxyXG4gIHN3aXRjaCAodW5pdHMpIHtcclxuICAgIGNhc2UgVU5JVF9QQVJBR1JBUEhTOlxyXG4gICAgY2FzZSBVTklUX1BBUkFHUkFQSDpcclxuICAgICAgcmV0dXJuIGxvcmVtLmdlbmVyYXRlUGFyYWdyYXBocyhjb3VudCk7XHJcbiAgICBjYXNlIFVOSVRfU0VOVEVOQ0VTOlxyXG4gICAgY2FzZSBVTklUX1NFTlRFTkNFOlxyXG4gICAgICByZXR1cm4gbG9yZW0uZ2VuZXJhdGVTZW50ZW5jZXMoY291bnQpO1xyXG4gICAgY2FzZSBVTklUX1dPUkRTOlxyXG4gICAgY2FzZSBVTklUX1dPUkQ6XHJcbiAgICAgIHJldHVybiBsb3JlbS5nZW5lcmF0ZVdvcmRzKGNvdW50KTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGxvcmVtSXBzdW0sIExvcmVtSXBzdW0gfTtcclxuIl19