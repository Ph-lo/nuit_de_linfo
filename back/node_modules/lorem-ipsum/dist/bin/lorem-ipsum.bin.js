#!/usr/bin/env node
"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _ = require("..");

var _formats = require("../constants/formats");

var _regex = require("../constants/regex");

var _cli = require("./constants/cli");

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

_commander["default"].version((0, _util.getVersion)()).usage(_cli.USAGE).command("[count] [units]", _cli.DESCRIPTION).option("-c --copy", "Copy").option("-f --format <format>", "Format", _regex.REGEX.FORMATS, _formats.FORMAT_PLAIN).action(function () {
  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "1";
  var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "sentence";

  if (_regex.REGEX.UNITS.test(units) === false) {
    // tslint:disable-next-line:no-console
    console.error("".concat(units, " is not valid. Choose from paragraph(s), sentence(s), or word(s)."));
    process.exit(1);
  }

  var count = parseInt(num, 10);

  if (!count || count < 1) {
    // tslint:disable-next-line:no-console
    console.error("".concat(count, " is not valid. Choose a number greater than 1."));
    process.exit(1);
  }

  var output = (0, _.loremIpsum)({
    count: count,
    format: _commander["default"].format,
    units: units
  }); // tslint:disable-next-line:no-console

  console.log(output);

  if (_commander["default"].copy === true) {
    (0, _util.copyToClipboard)(output).then(function () {
      // tslint:disable-next-line:no-console
      console.log(""); // tslint:disable-next-line:no-console

      console.log("âœ“ copied");
    })["catch"](function (err) {
      // tslint:disable-next-line:no-console
      console.log(err.message);
    });
  }
});

_commander["default"].parse(process.argv);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vbG9yZW0taXBzdW0uYmluLnRzIl0sIm5hbWVzIjpbInByb2dyYW0iLCJ2ZXJzaW9uIiwidXNhZ2UiLCJVU0FHRSIsImNvbW1hbmQiLCJERVNDUklQVElPTiIsIm9wdGlvbiIsIlJFR0VYIiwiRk9STUFUUyIsIkZPUk1BVF9QTEFJTiIsImFjdGlvbiIsIm51bSIsInVuaXRzIiwiVU5JVFMiLCJ0ZXN0IiwiY29uc29sZSIsImVycm9yIiwicHJvY2VzcyIsImV4aXQiLCJjb3VudCIsInBhcnNlSW50Iiwib3V0cHV0IiwiZm9ybWF0IiwibG9nIiwiY29weSIsInRoZW4iLCJlcnIiLCJtZXNzYWdlIiwicGFyc2UiLCJhcmd2Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLHNCQUNHQyxPQURILENBQ1csdUJBRFgsRUFFR0MsS0FGSCxDQUVTQyxVQUZULEVBR0dDLE9BSEgsb0JBRzhCQyxnQkFIOUIsRUFJR0MsTUFKSCxDQUlVLFdBSlYsRUFJdUIsTUFKdkIsRUFLR0EsTUFMSCxDQUtVLHNCQUxWLEVBS2tDLFFBTGxDLEVBSzRDQyxhQUFNQyxPQUxsRCxFQUsyREMscUJBTDNELEVBTUdDLE1BTkgsQ0FNVSxZQUdIO0FBQUEsTUFGSEMsR0FFRyx1RUFGVyxHQUVYO0FBQUEsTUFESEMsS0FDRyx1RUFEMkYsVUFDM0Y7O0FBQ0gsTUFBSUwsYUFBTU0sS0FBTixDQUFZQyxJQUFaLENBQWlCRixLQUFqQixNQUE0QixLQUFoQyxFQUF1QztBQUNyQztBQUNBRyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsV0FDS0osS0FETDtBQUdBSyxJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0Q7O0FBRUQsTUFBTUMsS0FBSyxHQUFHQyxRQUFRLENBQUNULEdBQUQsRUFBTSxFQUFOLENBQXRCOztBQUNBLE1BQUksQ0FBQ1EsS0FBRCxJQUFVQSxLQUFLLEdBQUcsQ0FBdEIsRUFBeUI7QUFDdkI7QUFDQUosSUFBQUEsT0FBTyxDQUFDQyxLQUFSLFdBQWlCRyxLQUFqQjtBQUNBRixJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0Q7O0FBRUQsTUFBTUcsTUFBTSxHQUFHLGtCQUFXO0FBQ3hCRixJQUFBQSxLQUFLLEVBQUxBLEtBRHdCO0FBRXhCRyxJQUFBQSxNQUFNLEVBQUV0QixzQkFBUXNCLE1BRlE7QUFHeEJWLElBQUFBLEtBQUssRUFBTEE7QUFId0IsR0FBWCxDQUFmLENBaEJHLENBc0JIOztBQUNBRyxFQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWUYsTUFBWjs7QUFFQSxNQUFJckIsc0JBQVF3QixJQUFSLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLCtCQUFnQkgsTUFBaEIsRUFDR0ksSUFESCxDQUNRLFlBQU07QUFDVjtBQUNBVixNQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWSxFQUFaLEVBRlUsQ0FJVjs7QUFDQVIsTUFBQUEsT0FBTyxDQUFDUSxHQUFSLENBQVksVUFBWjtBQUNELEtBUEgsV0FRUyxVQUFDRyxHQUFELEVBQVM7QUFDZDtBQUNBWCxNQUFBQSxPQUFPLENBQUNRLEdBQVIsQ0FBWUcsR0FBRyxDQUFDQyxPQUFoQjtBQUNELEtBWEg7QUFZRDtBQUNGLENBaERIOztBQWtEQTNCLHNCQUFRNEIsS0FBUixDQUFjWCxPQUFPLENBQUNZLElBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByb2dyYW0gZnJvbSBcImNvbW1hbmRlclwiO1xyXG5pbXBvcnQgeyBsb3JlbUlwc3VtIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IEZPUk1BVF9QTEFJTiB9IGZyb20gXCIuLi9jb25zdGFudHMvZm9ybWF0c1wiO1xyXG5pbXBvcnQgeyBSRUdFWCB9IGZyb20gXCIuLi9jb25zdGFudHMvcmVnZXhcIjtcclxuaW1wb3J0IHsgREVTQ1JJUFRJT04sIFVTQUdFIH0gZnJvbSBcIi4vY29uc3RhbnRzL2NsaVwiO1xyXG5pbXBvcnQgeyBjb3B5VG9DbGlwYm9hcmQsIGdldFZlcnNpb24gfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5wcm9ncmFtXHJcbiAgLnZlcnNpb24oZ2V0VmVyc2lvbigpKVxyXG4gIC51c2FnZShVU0FHRSlcclxuICAuY29tbWFuZChgW2NvdW50XSBbdW5pdHNdYCwgREVTQ1JJUFRJT04pXHJcbiAgLm9wdGlvbihcIi1jIC0tY29weVwiLCBcIkNvcHlcIilcclxuICAub3B0aW9uKFwiLWYgLS1mb3JtYXQgPGZvcm1hdD5cIiwgXCJGb3JtYXRcIiwgUkVHRVguRk9STUFUUywgRk9STUFUX1BMQUlOKVxyXG4gIC5hY3Rpb24oKFxyXG4gICAgbnVtOiBzdHJpbmcgPSBcIjFcIixcclxuICAgIHVuaXRzOiBcIndvcmRzXCIgfCBcIndvcmRcIiB8IFwic2VudGVuY2VzXCIgfCBcInNlbnRlbmNlXCIgfCBcInBhcmFncmFwaHNcIiB8IFwicGFyYWdyYXBoXCIgfCB1bmRlZmluZWQgPSBcInNlbnRlbmNlXCIsXHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoUkVHRVguVU5JVFMudGVzdCh1bml0cykgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgYCR7dW5pdHN9IGlzIG5vdCB2YWxpZC4gQ2hvb3NlIGZyb20gcGFyYWdyYXBoKHMpLCBzZW50ZW5jZShzKSwgb3Igd29yZChzKS5gLFxyXG4gICAgICApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY291bnQgPSBwYXJzZUludChudW0sIDEwKTtcclxuICAgIGlmICghY291bnQgfHwgY291bnQgPCAxKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y291bnR9IGlzIG5vdCB2YWxpZC4gQ2hvb3NlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLmApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0ID0gbG9yZW1JcHN1bSh7XHJcbiAgICAgIGNvdW50LFxyXG4gICAgICBmb3JtYXQ6IHByb2dyYW0uZm9ybWF0LFxyXG4gICAgICB1bml0cyxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICBjb25zb2xlLmxvZyhvdXRwdXQpO1xyXG5cclxuICAgIGlmIChwcm9ncmFtLmNvcHkgPT09IHRydWUpIHtcclxuICAgICAgY29weVRvQ2xpcGJvYXJkKG91dHB1dClcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJcIik7XHJcblxyXG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwi4pyTIGNvcGllZFwiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxucHJvZ3JhbS5wYXJzZShwcm9jZXNzLmFyZ3YpO1xyXG4iXX0=